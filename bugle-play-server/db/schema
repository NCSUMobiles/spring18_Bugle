CREATE TABLE IF NOT EXISTS users (
    u_id SERIAL PRIMARY KEY,
	u_name text NOT NULL,
	email text NOT NULL,
	mobile text,
	dob text,
	password text NOT NULL,
	type text NOT NULL,
	description text,
	location text,
	website text,
	gprofid text
);

CREATE TABLE IF NOT EXISTS events (
	e_id SERIAL PRIMARY KEY,
	e_name text NOT NULL,
	location text,
	datetime text,
	description text,
	members text,
	u_id integer, //userId of the organizer who created this event. 
	status text
);

CREATE TABLE IF NOT EXISTS applicants (
	a_id SERIAL PRIMARY KEY,
	u_id integer NOT NULL,
	e_id integer NOT NULL,
	status text
);

CREATE TABLE IF NOT EXISTS chats (
	c_id SERIAL PRIMARY KEY,
	c_name text NOT NULL,
	u_id integer,
	e_id integer,
	m_id integer, //message Id of the initial message of this event's chat.
	status text
);

CREATE TABLE IF NOT EXISTS messages (
	m_id SERIAL PRIMARY KEY,
	e_id integer,
	msg text,
	status text,
	unique(e_id)
);

DROP FUNCTION IF EXISTS update_mId;
CREATE OR REPLACE FUNCTION update_mId()
RETURNS trigger AS '
BEGIN
  IF NEW.m_id IS NULL THEN
    NEW.m_id := (select m_id from chats where e_id = NEW.e_id and m_id IS NOT NULL);
  END IF;
  RETURN NEW;
END' LANGUAGE 'plpgsql';

DROP TRIGGER IF EXISTS update_chat_mId on "chats";
CREATE TRIGGER update_chat_mId before insert on chats for each row execute procedure update_mId();